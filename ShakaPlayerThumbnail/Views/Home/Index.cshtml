<script>
  document.addEventListener('DOMContentLoaded', async () => {
    const fullscreenToggleBtn = document.getElementById('fullscreen-toggle-btn');
    let lastPreviewPosition;
    let isHovering = false;
    let isPlayingPreview = false;
    let hideThumbnailTimer;

    if (fullscreenToggleBtn) {
      fullscreenToggleBtn.addEventListener('click', () => {
        const videoContainer = document.getElementById('video-container');
        if (!document.fullscreenElement) {
          if (videoContainer.requestFullscreen) {
            videoContainer.requestFullscreen();
          } else if (videoContainer.mozRequestFullScreen) {
            videoContainer.mozRequestFullScreen();
          } else if (videoContainer.webkitRequestFullscreen) {
            videoContainer.webkitRequestFullscreen();
          } else if (videoContainer.msRequestFullscreen) {
            videoContainer.msRequestFullscreen();
          }
        } else {
          if (document.exitFullscreen) {
            document.exitFullscreen();
          }
        }
      });
    } else {
      console.error('Fullscreen toggle button not found.');
    }

    const video = document.getElementById('video');
    const seekBar = document.getElementById('seek-bar');
    const thumbElement = document.getElementById('thumb');
    const errorDisplay = document.getElementById('error');
    const videoContainer = document.getElementById('video-container');
    const player = new shaka.Player(video);
    let thumbnailTrack;

    try {
      const videoUrl = "@Html.Raw(Model.Item1)";
      const vttUrl = "@Html.Raw(Model.Item2)";
      await player.load(videoUrl);
      console.log('Video loaded successfully!');
      thumbnailTrack = await setupThumbnails(player, thumbElement, vttUrl);
    } catch (error) {
      console.error('Error loading video:', error);
      errorDisplay.textContent = `Error loading video: ${error.message}`;
    }

    player.addEventListener('error', (event) => {
      console.error('Player error:', event.detail);
      errorDisplay.textContent = `Player Error: ${event.detail.message}`;
    });

    seekBar.addEventListener('click', (event) => {
      const duration = player.seekRange().end;
      const percent = (event.offsetX || event.touches[0].clientX - seekBar.getBoundingClientRect().left) / seekBar.clientWidth;
      const position = percent * duration;
      video.pause();
      video.currentTime = position;
    });

    document.addEventListener('fullscreenchange', () => {
      adjustSeekbarPosition();

      if (document.fullscreenElement) {
        videoContainer.classList.add('fullscreen');
      } else {
        videoContainer.classList.remove('fullscreen');
      }
    });

    async function setupThumbnails(player, thumbElement, vttUrl) {
      try {
        const thumbnailTrack = await player.addThumbnailsTrack(vttUrl);

        if (!thumbnailTrack) {
          throw new Error('Thumbnail track could not be added.');
        }

        const showThumbnail = debounce(async (event) => {
          clearTimeout(hideThumbnailTimer); // Prevent hiding the thumbnail too soon
          video.pause();
          const seekBarRect = seekBar.getBoundingClientRect();
          const duration = player.seekRange().end;

          let offsetX;
          if (event.type.includes('touch')) {
            offsetX = event.touches[0].clientX - seekBarRect.left;
          } else {
            offsetX = event.pageX - seekBarRect.left;
          }

          const percent = offsetX / seekBarRect.width;
          const position = percent * duration;
          lastPreviewPosition = position;

          try {
            const thumbnail = await player.getThumbnails(thumbnailTrack.id, position);

            if (thumbnail && thumbnail.uris.length > 0) {
              const imageUrl = thumbnail.uris[0].split('#')[0];
              const x = thumbnail.positionX || 0;
              const y = thumbnail.positionY || 0;
              const width = thumbnail.width || 120;
              const height = thumbnail.height || 68;

              thumbElement.style.backgroundImage = `url(${imageUrl})`;
              thumbElement.style.backgroundPosition = `-${x}px -${y}px`;
              thumbElement.style.width = `${width}px`;
              thumbElement.style.height = `${height}px`;

              let thumbX = offsetX;
              thumbX = Math.max(thumbElement.clientWidth / 2, Math.min(seekBarRect.width - thumbElement.clientWidth / 2, thumbX));
              thumbElement.style.left = `${thumbX}px`;
              thumbElement.style.top = `-80px`;
              thumbElement.style.display = 'block';
            } else {
              console.log('No thumbnail found for this position.');
            }

            if (!isPlayingPreview) {
              isPlayingPreview = true;
            }
          } catch (error) {
            console.error('Error getting thumbnail:', error);
            errorDisplay.textContent = `Error getting thumbnail: ${error.message}`;
          }
        }, 5);

        const hideThumbnail = debounce(() => {
          hideThumbnailTimer = setTimeout(() => {
            thumbElement.style.display = 'none';
            isPlayingPreview = false;
          }, 5); // Hide after 5 milliseconds if not hovering
        }, 100);

        // Mouse and touch events for showing/hiding thumbnails
        seekBar.addEventListener('mousemove', showThumbnail);
        seekBar.addEventListener('mouseleave', hideThumbnail);
        seekBar.addEventListener('touchstart', showThumbnail);
        seekBar.addEventListener('touchmove', debounce(showThumbnail, 5));
        seekBar.addEventListener('touchend', hideThumbnail);

        return thumbnailTrack;
      } catch (error) {
        console.error('Failed to set up thumbnails:', error);
        errorDisplay.textContent = `Failed to set up thumbnails: ${error.message}`;
      }
    }

    function debounce(func, delay) {
      let timer;
      return function (...args) {
        clearTimeout(timer);
        timer = setTimeout(() => func.apply(this, args), delay);
      };
    }

    function adjustSeekbarPosition() {
      const seekbarContainer = document.getElementById('seekbar-container');

      if (document.fullscreenElement) {
        seekbarContainer.classList.add('fullscreen');
      } else {
        seekbarContainer.classList.remove('fullscreen');
      }
    }
  });
</script>
