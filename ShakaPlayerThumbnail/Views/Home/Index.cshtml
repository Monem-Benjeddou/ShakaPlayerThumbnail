@model Tuple<string, string>
<title>Shaka Player in .NET MVC</title>
<style>
  .video-container {
    position: relative;
  }

  #video {
    width: 100%;
    height: auto;
    max-height: 500px;
    border-radius: 10px;
    box-shadow: 0px 4px 20px rgba(0, 0, 0, 0.1);
  }

  #thumb {
    z-index: 20;
    width: 160px;
    height: 90px;
    pointer-events: none;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.15);
    position: absolute;
    background-size: cover;
    background-repeat: no-repeat;
    display: none;
  }

  #seekBar {
    position: absolute;
    bottom: 30px;
    left: 0;
    right: 0;
    height: 5px;
    border-radius: 5px;
    cursor: pointer; 
  }

  #error {
    color: red;
    margin-top: 10px;
  }
</style>
<div class="container mt-5">
  <h2 class="text-center mb-4">Shaka Player in .NET MVC</h2>

  <div class="card shadow p-4">
    <div class="video-container mb-4">
      <video id="video" class="rounded mb-3" controls autoplay aria-label="Video player"></video>
      <div id="seekBar" class="w-100"></div>
    </div>

    <div id="thumb" role="tooltip" aria-hidden="true"></div>
    <div id="error" class="text-danger" role="alert"></div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', async () => {
    const video = document.getElementById('video');
    const errorDisplay = document.getElementById('error');
    const thumbElement = document.getElementById('thumb');
    const seekBar = document.getElementById('seekBar');

    const player = new shaka.Player(video);

    player.addEventListener('error', (event) => {
      errorDisplay.textContent = `Error: ${event.detail.message}`;
    });

    try {
      const videoUrl = "@Html.Raw(Model.Item1)";
      const vttUrl = "@Html.Raw(Model.Item2)";
      await player.load(videoUrl);
      await setupThumbnails(player, thumbElement, vttUrl);
    } catch (error) {
      errorDisplay.textContent = `Error loading video: ${error.message}`;
    }
  });

  async function setupThumbnails(player, thumbElement, vttUrl) {
    try {
      const thumbnailTrack = await player.addThumbnailsTrack(vttUrl);

      if (!thumbnailTrack) {
        throw new Error('Thumbnail track could not be added.');
      }

      seekBar.addEventListener('mousemove', debounce(async (event) => {
        const duration = player.seekRange().end;
        const percent = event.offsetX / seekBar.clientWidth;
        const position = percent * duration;

        try {
          const thumbnail = await player.getThumbnails(thumbnailTrack.id, position);

          if (thumbnail && thumbnail.uris.length > 0) {
            const imageUrl = thumbnail.uris[0].split('#')[0];
            const x = thumbnail.positionX || 0;
            const y = thumbnail.positionY || 0;
            const width = thumbnail.width || 160;
            const height = thumbnail.height || 90;

            // Set the thumbnail image and size
            thumbElement.style.backgroundImage = `url(${imageUrl})`;
            thumbElement.style.backgroundPosition = `-${x}px -${y}px`;
            thumbElement.style.width = `${width}px`;
            thumbElement.style.height = `${height}px`;

            // Calculate the position of the thumbnail above the seek bar
            const seekBarRect = seekBar.getBoundingClientRect();
            const thumbX = event.pageX - seekBarRect.left - (thumbElement.clientWidth /2)+30; // Center thumbnail relative to the mouse
            const thumbY = seekBarRect.top - thumbElement.clientHeight - 190; // Place it 10px above the seek bar

            // Apply the calculated positions
            thumbElement.style.left = `${thumbX}px`;
            thumbElement.style.top = `${thumbY}px`;
            thumbElement.style.display = 'block';
          }
        } catch (error) {
          console.error('Error getting thumbnail:', error);
          errorDisplay.textContent = `Error getting thumbnail: ${error.message}`;
        }
      }, 5));

      seekBar.addEventListener('mouseleave', () => {
        thumbElement.style.display = 'none'; // Hide thumbnail when the mouse leaves the seek bar
      });

      seekBar.addEventListener('mouseleave', () => {
        thumbElement.style.display = 'none';
      });
    } catch (error) {
      console.error('Failed to set up thumbnails:', error);
      errorDisplay.textContent = `Failed to set up thumbnails: ${error.message}`;
    }
  }

  function debounce(func, delay) {
    let timer;
    return function(...args) {
      clearTimeout(timer);
      timer = setTimeout(() => func.apply(this, args), delay);
    };
  }
</script>
