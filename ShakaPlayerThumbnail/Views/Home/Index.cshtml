<div id="video-container" class="video-container">
  <video id="video" controls></video>
  <div id="seekbar-container" class="seekbar-container">
    <div id="seek-bar"></div>
    <div id="thumb" class="thumbnail"></div>
  </div>
  <div id="error" class="error-message"></div>
</div>

<style>
  .video-container {
    position: relative;
    width: 100%;
    max-width: 800px;
    margin: auto;
  }

  #seekbar-container {
    position: absolute;
    width: 95%;
    display: flex;
    align-items: center;
    justify-content: center;
    bottom: 26px;
    left: 15px;
  }

  #seek-bar {
    height: 5px;
    cursor: pointer;
    width: 100%;
    margin: 0 auto;
    border-radius: 2px;
    position: relative;
  }

  .thumbnail {
    position: absolute;
    display: none;
    background-color: rgba(0, 0, 0, 0.7);
    background-size: 800px 450px; /* 5x160px = 800px, 5x90px = 450px */
    width: 160px;
    height: 90px;
    pointer-events: none;
    z-index: 1000;
    border: 2px solid #fff;
    border-radius: 4px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
    transform: translateX(-50%);
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', async () => {
    const video = document.getElementById('video');
    const seekBar = document.getElementById('seek-bar');
    const thumbElement = document.getElementById('thumb');
    const errorDisplay = document.getElementById('error');
    const player = new shaka.Player(video);

    try {
      const videoUrl = "@Html.Raw(Model.Item1)";
      const vttUrl = "@Html.Raw(Model.Item2)";
      await player.load(videoUrl);
      console.log('The video has now been loaded!');
      await setupThumbnails(player, thumbElement, vttUrl);
    } catch (error) {
      console.error('Error code', error.code, 'object', error);
      errorDisplay.textContent = `Error loading video: ${error.message}`;
    }

    player.addEventListener('error', (event) => {
      console.error('Error code', event.detail.code, 'object', event.detail);
    });

    seekBar.addEventListener('click', (event) => {
      const duration = player.seekRange().end;
      const percent = (event.offsetX || event.touches[0].clientX - seekBar.getBoundingClientRect().left) / seekBar.clientWidth;
      const position = percent * duration;

      console.log('Seeking to:', position);
      video.currentTime = position;
    });
  });

  async function setupThumbnails(player, thumbElement, vttUrl) {
    try {
      const thumbnailTrack = await player.addThumbnailsTrack(vttUrl);

      if (!thumbnailTrack) {
        throw new Error('Thumbnail track could not be added.');
      }

      const seekBar = document.getElementById('seek-bar');

      const showThumbnail = async (event) => {
        const duration = player.seekRange().end;
        const percent = (event.offsetX || event.touches[0].clientX - seekBar.getBoundingClientRect().left) / seekBar.clientWidth;
        const position = percent * duration;

        try {
          const thumbnail = await player.getThumbnails(thumbnailTrack.id, position);

          if (thumbnail && thumbnail.uris.length > 0) {
            const imageUrl = thumbnail.uris[0].split('#')[0];
            const x = thumbnail.positionX || 0;
            const y = thumbnail.positionY || 0;
            const width = thumbnail.width || 160;
            const height = thumbnail.height || 90;

            thumbElement.style.backgroundImage = `url(${imageUrl})`;
            thumbElement.style.backgroundPosition = `-${x}px -${y}px`;
            thumbElement.style.width = `${width}px`;
            thumbElement.style.height = `${height}px`;

            const seekBarRect = seekBar.getBoundingClientRect();
            let thumbX = event.pageX - seekBarRect.left;
            let thumbY = -thumbElement.clientHeight - 10; // Added spacing from the seek bar

            thumbX = Math.max(thumbElement.clientWidth / 2, Math.min(seekBarRect.width - thumbElement.clientWidth / 2, thumbX));
            thumbElement.style.left = `${thumbX}px`;
            thumbElement.style.top = `${thumbY}px`;
            thumbElement.style.display = 'block';
          }
        } catch (error) {
          console.error('Error getting thumbnail:', error);
          errorDisplay.textContent = `Error getting thumbnail: ${error.message}`;
        }
      };

      seekBar.addEventListener('mousemove', debounce(showThumbnail, 5));
      seekBar.addEventListener('mouseleave', () => {
        thumbElement.style.display = 'none';
      });

      // Handle touch and click events for mobile
      seekBar.addEventListener('touchstart', showThumbnail);
      seekBar.addEventListener('touchmove', debounce(showThumbnail, 5));
      seekBar.addEventListener('click', showThumbnail);

    } catch (error) {
      console.error('Failed to set up thumbnails:', error);
      document.getElementById('error').textContent = `Failed to set up thumbnails: ${error.message}`;
    }
  }

  function debounce(func, delay) {
    let timer;
    return function (...args) {
      clearTimeout(timer);
      timer = setTimeout(() => func.apply(this, args), delay);
    };
  }
</script>
