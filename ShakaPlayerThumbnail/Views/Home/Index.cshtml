<div id="video-container" class="video-container">
  <video id="video" controls></video>
  <div id="seekbar-container">
    <div id="seek-bar"></div>
    <div id="thumb" class="thumbnail"></div>
  </div>
  <button id="fullscreen-toggle-btn"></button>
  <div id="error" class="error-message"></div>
</div>

<script>document.addEventListener('DOMContentLoaded', async () => {
    const fullscreenToggleBtn = document.getElementById('fullscreen-toggle-btn');
    const video = document.getElementById('video');
    const seekBar = document.getElementById('seek-bar');
    const thumbElement = document.getElementById('thumb');
    const errorDisplay = document.getElementById('error');
    const videoContainer = document.getElementById('video-container');
    const player = new shaka.Player(video);
    let lastPreviewPosition = 0, thumbnailTrack, isHovering = false;

    // Fullscreen toggle logic
    fullscreenToggleBtn?.addEventListener('click', toggleFullscreen);

    function toggleFullscreen() {
      if (!document.fullscreenElement) {
        videoContainer.requestFullscreen?.() ||
        videoContainer.mozRequestFullScreen?.() ||
        videoContainer.webkitRequestFullscreen?.() ||
        videoContainer.msRequestFullscreen?.();
      } else {
        document.exitFullscreen?.();
      }
    }

    document.addEventListener('fullscreenchange', () => {
      videoContainer.classList.toggle('fullscreen', !!document.fullscreenElement);
      adjustSeekbarPosition();
    });

    try {
      const videoUrl = "@Html.Raw(Model.Item1)";
      const vttUrl = "@Html.Raw(Model.Item2)";
      await player.load(videoUrl);
      console.log('Video loaded successfully!');
      thumbnailTrack = await setupThumbnails(player, thumbElement, vttUrl);
    } catch (error) {
      handleError('Error loading video', error);
    }

    player.addEventListener('error', (event) => {
      handleError('Player error', event.detail);
    });

    // Setup events for seeking and previewing thumbnails
    async function setupThumbnails(player, thumbElement, vttUrl) {
      try {
        const thumbnailTrack = await player.addThumbnailsTrack(vttUrl);
        if (!thumbnailTrack) throw new Error('Thumbnail track could not be added.');

        const showThumbnail = debounce(handleThumbnailPreview, 5);
        let hideTimeout;

        // Show thumbnail on hover or touchmove
        ['mousemove', 'touchmove'].forEach((event) => {
          seekBar.addEventListener(event, (e) => {
            isHovering = true;
            clearTimeout(hideTimeout);
            showThumbnail(e);
            videoContainer.classList.add('hover');
            video.controls = true; // Ensure controls are visible during interaction
          });
        });

        // Hide thumbnail on mouseleave, touchend, or click
        ['mouseleave', 'touchend', 'click', 'mouseup'].forEach((event) => {
          seekBar.addEventListener(event, () => {
            isHovering = false;
            hideTimeout = setTimeout(() => {
              thumbElement.style.display = 'none';
              videoContainer.classList.remove('hover');
              if (lastPreviewPosition !== undefined) {
                video.currentTime = lastPreviewPosition;
              }
            }, 5);
          });
        });

        return thumbnailTrack;
      } catch (error) {
        handleError('Failed to set up thumbnails', error);
      }
    }

    // Handle thumbnail preview when moving over the seek bar
    function handleThumbnailPreview(event) {
      const { offsetX, position } = getSeekBarInfo(event);
      lastPreviewPosition = position;

      player.getThumbnails(thumbnailTrack.id, position).then((thumbnail) => {
        if (thumbnail?.uris.length) {
          const [imageUrl, { x, y, width, height }] = parseThumbnailData(thumbnail);
          displayThumbnail(thumbElement, imageUrl, x, y, width, height, offsetX);
        }
      }).catch((error) => handleError('Error getting thumbnail', error));
    }

    function adjustSeekbarPosition() {
      const seekbarContainer = document.getElementById('seekbar-container');
      seekbarContainer.classList.toggle('fullscreen', !!document.fullscreenElement);
    }

    function debounce(func, delay) {
      let timer;
      return function (...args) {
        clearTimeout(timer);
        timer = setTimeout(() => func.apply(this, args), delay);
      };
    }

    function getSeekBarInfo(event) {
      const seekBarRect = seekBar.getBoundingClientRect();
      const duration = player.seekRange().end;
      const offsetX = event.touches ? event.touches[0].clientX - seekBarRect.left : event.pageX - seekBarRect.left;
      const position = (offsetX / seekBarRect.width) * duration;
      return { offsetX, position };
    }

    function parseThumbnailData(thumbnail) {
      const imageUrl = thumbnail.uris[0].split('#')[0];
      const fragment = thumbnail.uris[0].split('#')[1];
      let x = 0, y = 0, width = 120, height = 68;

      if (fragment && fragment.startsWith("xywh=")) {
        const [, coords] = fragment.split("=");
        const [xValue, yValue, widthValue, heightValue] = coords.split(",");
        x = parseInt(xValue, 10);
        y = parseInt(yValue, 10);
        width = parseInt(widthValue, 10);
        height = parseInt(heightValue, 10);
      }

      return [imageUrl, { x, y, width, height }];
    }

    function displayThumbnail(thumbElement, imageUrl, x, y, width, height, offsetX) {
      thumbElement.style.backgroundImage = `url(${imageUrl})`;
      thumbElement.style.backgroundPosition = `-${x}px -${y}px`;
      thumbElement.style.width = `${width}px`;
      thumbElement.style.height = `${height}px`;
      const thumbX = Math.max(thumbElement.clientWidth / 2, Math.min(seekBar.clientWidth - thumbElement.clientWidth / 2, offsetX));
      thumbElement.style.left = `${thumbX}px`;
      thumbElement.style.top = `-80px`;
      thumbElement.style.display = 'block';
    }

    function handleError(message, error) {
      console.error(message, error);
      errorDisplay.textContent = `${message}: ${error.message}`;
    }
  });
</script>
