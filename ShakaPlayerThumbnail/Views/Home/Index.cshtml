<div id="video-container" class="video-container">
  <video id="video" controls></video>
  <div id="seekbar-container">
    <div id="seek-bar"></div>
    <div id="thumb" class="thumbnail hidden"></div>
  </div>
  <button id="fullscreen-toggle-btn"></button>
  <div id="error" class="error-message"></div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', async () => {
    const fullscreenToggleBtn = document.getElementById('fullscreen-toggle-btn');
    const video = document.getElementById('video');
    const seekBar = document.getElementById('seek-bar');
    const thumbElement = document.getElementById('thumb');
    const errorDisplay = document.getElementById('error');
    const videoContainer = document.getElementById('video-container');
    const player = new shaka.Player(video);
    let thumbnailTrack, hideThumbnailTimer;

    // Fullscreen toggle logic
    fullscreenToggleBtn?.addEventListener('click', () => {
      if (!document.fullscreenElement) {
        videoContainer.requestFullscreen();
      } else {
        document.exitFullscreen();
      }
    });

    // Load video and setup thumbnails
    try {
      const videoUrl = "@Html.Raw(Model.Item1)";
      const vttUrl = "@Html.Raw(Model.Item2)";
      await player.load(videoUrl);
      thumbnailTrack = await setupThumbnails(player, thumbElement, vttUrl);
      console.log('Video loaded successfully!');
    } catch (error) {
      displayError(`Error loading video: ${error.message}`);
    }

    // Handle player errors
    player.addEventListener('error', (event) => {
      displayError(`Player Error: ${event.detail.message}`);
    });

    // Seekbar click logic
    seekBar.addEventListener('click', (event) => {
      const duration = player.seekRange().end;
      const percent = (event.offsetX || event.touches?.[0]?.clientX - seekBar.getBoundingClientRect().left) / seekBar.clientWidth;
      video.currentTime = percent * duration;
      video.pause();
    });

    // Fullscreen change event listener
    document.addEventListener('fullscreenchange', adjustSeekbarPosition);

    // Setup thumbnail previews
    async function setupThumbnails(player, thumbElement, vttUrl) {
      try {
        const thumbnailTrack = await player.addThumbnailsTrack(vttUrl);
        if (!thumbnailTrack) throw new Error('Thumbnail track could not be added.');

        const showThumbnail = debounce(async (event) => {
          clearTimeout(hideThumbnailTimer);
          video.pause();
          const position = getPositionFromEvent(event, player);

          try {
            const thumbnail = await player.getThumbnails(thumbnailTrack.id, position);
            if (thumbnail && thumbnail.uris.length) {
              updateThumbnailStyle(thumbnail, event.pageX, seekBar);
              thumbElement.classList.remove('hidden');
            } else {
              console.log('No thumbnail found for this position.');
            }
          } catch (error) {
            displayError(`Error getting thumbnail: ${error.message}`);
          }
        }, 100);

        const hideThumbnail = debounce(() => {
          hideThumbnailTimer = setTimeout(() => {
            thumbElement.classList.add('hidden');
            if (video.paused) video.play();
          }, 100);
        }, 100);

        // Mouse and touch events
        seekBar.addEventListener('mousemove', showThumbnail);
        seekBar.addEventListener('mouseleave', hideThumbnail);
        seekBar.addEventListener('touchmove', showThumbnail);
        seekBar.addEventListener('touchend', hideThumbnail);

        return thumbnailTrack;
      } catch (error) {
        displayError(`Failed to set up thumbnails: ${error.message}`);
      }
    }

    // Utility functions
    function getPositionFromEvent(event, player) {
      const duration = player.seekRange().end;
      const seekBarRect = seekBar.getBoundingClientRect();
      const offsetX = event.pageX - seekBarRect.left;
      return (offsetX / seekBarRect.width) * duration;
    }

    function updateThumbnailStyle(thumbnail, offsetX, seekBar) {
      const { uris, positionX = 0, positionY = 0, width = 120, height = 68 } = thumbnail;
      const imageUrl = uris[0].split('#')[0];

      thumbElement.style.backgroundImage = `url(${imageUrl})`;
      thumbElement.style.backgroundPosition = `-${positionX}px -${positionY}px`;
      thumbElement.style.width = `${width}px`;
      thumbElement.style.height = `${height}px`;

      const thumbX = Math.max(width / 2, Math.min(seekBar.clientWidth - width / 2, offsetX));
      thumbElement.style.left = `${thumbX}px`;
    }

    function displayError(message) {
      errorDisplay.textContent = message;
      console.error(message);
    }

    function debounce(func, delay) {
      let timer;
      return function (...args) {
        clearTimeout(timer);
        timer = setTimeout(() => func.apply(this, args), delay);
      };
    }

    function adjustSeekbarPosition() {
      document.fullscreenElement
        ? seekBar.classList.add('fullscreen')
        : seekBar.classList.remove('fullscreen');
    }
  });
</script>

<style>
  .hidden { display: none; }
  .fullscreen { width: 100%; height: 100%; }
</style>
