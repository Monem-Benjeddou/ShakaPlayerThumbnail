@model string
  <title>Shaka Player in .NET MVC</title>
  <style>
    #video {
      width: 100%;
      height: auto;
      max-height: 500px;
      border-radius: 10px;
      box-shadow: 0px 4px 20px rgba(0, 0, 0, 0.1);
    }

    #thumb {
      z-index: 100;
      width: 160px;
      height: 90px;
      pointer-events: none;
      border-radius: 5px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.15);
    }

    #seekBar {
      position: relative;
      height: 10px;
      background-color: rgba(0, 0, 0, 0.5);
      cursor: pointer;
      border-radius: 5px;
    }

    #thumb {
      z-index: 10;
      pointer-events: none;
      display: none;
      position: absolute;
      background-size: cover;
      background-repeat: no-repeat;
    }

    #error {
      color: red;
      margin-top: 10px;
    }
  </style>
<div class="container mt-5">
  <h2 class="text-center mb-4">Shaka Player in .NET MVC</h2>

  <div class="card shadow p-4">
    <form asp-controller="Home" asp-action="GetVideo" method="post" class="mb-4">
      <div class="mb-3">
        <h5>Please enter the video name</h5>
        <input type="text" class="form-control" name="videoName" aria-label="Video name" placeholder="Enter video name" required />
      </div>
      <div class="d-grid gap-2">
        <button type="submit" class="btn btn-primary">Get Video</button>
      </div>
    </form>

    <div class="video-container mb-4">
      <video id="video" class="rounded mb-3" controls autoplay aria-label="Video player"></video>
      <div id="seekBar" class="w-100 bg-light"></div>
    </div>

    <div id="thumb" role="tooltip" aria-hidden="true"></div>
    <div id="error" class="text-danger" role="alert"></div>
  </div>
</div>


<script>
  document.addEventListener('DOMContentLoaded', async () => {
    const video = document.getElementById('video');
    const errorDisplay = document.getElementById('error');
    const thumbElement = document.getElementById('thumb');
    const seekBar = document.getElementById('seekBar');

    const player = new shaka.Player(video);

    player.addEventListener('error', (event) => {
      errorDisplay.textContent = `Error: ${event.detail.message}`;
    });

    try {
      const videoUrl = "@Html.Raw(Model)";
      await player.load(videoUrl);
      await setupThumbnails(player, thumbElement);
    } catch (error) {
      errorDisplay.textContent = `Error loading video: ${error.message}`;
    }
  });

  async function setupThumbnails(player, thumbElement) {
    try {
      const thumbnailTrack = await player.addThumbnailsTrack('/previews/thumbnails.vtt');

      seekBar.addEventListener('mousemove', debounce(async (event) => {
        const duration = player.seekRange().end;
        const percent = event.offsetX / seekBar.clientWidth;
        const position = percent * duration;

        try {
          const thumbnail = await player.getThumbnails(thumbnailTrack.id, position);

          if (thumbnail && thumbnail.uris.length > 0) {
            const imageUrl = thumbnail.uris[0].split('#')[0];

            const x = thumbnail.positionX;
            const y = thumbnail.positionY;
            const width = thumbnail.width;
            const height = thumbnail.height;

            thumbElement.style.backgroundImage = `url(${imageUrl})`;
            thumbElement.style.backgroundPosition = `-${x}px -${y}px`;
            thumbElement.style.width = `${width}px`;
            thumbElement.style.height = `${height}px`;

            const thumbX = event.pageX - thumbElement.clientWidth / 2;
            const thumbY = event.pageY - thumbElement.clientHeight - 10;
            thumbElement.style.left = `${thumbX}px`;
            thumbElement.style.top = `${thumbY}px`;
            thumbElement.style.display = 'block';
          }
        } catch (error) {
          console.error('Error getting thumbnail:', error);
          errorDisplay.textContent = `Error getting thumbnail: ${error.message}`;
        }
      }, 5));

      seekBar.addEventListener('mouseleave', () => {
        thumbElement.style.display = 'none';
      });
    } catch (error) {
      console.error('Failed to set up thumbnails:', error);
      errorDisplay.textContent = `Failed to set up thumbnails: ${error.message}`;
    }
  }

  function debounce(func, delay) {
    let timer;
    return function(...args) {
      clearTimeout(timer);
      timer = setTimeout(() => func.apply(this, args), delay);
    };
  }
</script>