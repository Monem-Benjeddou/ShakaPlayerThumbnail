<div id="video-container" class="video-container" controller>
  <video id="video"></video>
  <div id="video-controls" class="controls">
    <button id="play-pause" class="control-button">
      <img src="/media/play-icon.svg" alt="Play" id="play-icon">
      <img src="/media/pause-icon.svg" alt="Pause" id="pause-icon" style="display: none;">
    </button>
    <input type="range" id="seek-bar" min="0" max="100" value="0">
    <div id="thumb" class="thumbnail"></div>
    <button id="mute" class="control-button">
      <img src="/media/unmute-icon.svg" alt="Mute" id="mute-icon">
      <img src="/media/mute-icon.svg" alt="Unmute" id="unmute-icon" style="display: none;">
    </button>
    <div id="volume-container">
      <input type="range" id="volume-bar" min="0" max="1" step="0.1" value="1">
    </div>
    <button id="full-screen" class="control-button">
      <img src="/media/fullscreen-icon.svg" alt="Full Screen" id="fullscreen-icon">
    </button>
  </div>
  <div id="error" class="error-message"></div>
</div>




<script>
  document.addEventListener('DOMContentLoaded', async () => {
    const video = document.getElementById('video');
    const playPauseButton = document.getElementById('play-pause');
    const playIcon = document.getElementById('play-icon');
    const pauseIcon = document.getElementById('pause-icon');
    const muteButton = document.getElementById('mute');
    const muteIcon = document.getElementById('mute-icon');
    const unmuteIcon = document.getElementById('unmute-icon');
    const fullScreenButton = document.getElementById('full-screen');
    const seekBar = document.getElementById('seek-bar');
    const volumeBar = document.getElementById('volume-bar');
    const thumbElement = document.getElementById('thumb');
    const errorDisplay = document.getElementById('error');
    const videoContainer = document.getElementById('video-container');
    // Initialize Shaka Player
    const player = new shaka.Player(video);

    try {
      const videoUrl = "@Html.Raw(Model.Item1)";
      const vttUrl = "@Html.Raw(Model.Item2)";
      await player.load(videoUrl);
      console.log('The video has now been loaded!');
      await setupThumbnails(player, thumbElement, vttUrl);
    } catch (error) {
      console.error('Error code', error.code, 'object', error);
      errorDisplay.textContent = `Error loading video: ${error.message}`;
    }

    // Play/Pause functionality
    playPauseButton.addEventListener('click', () => {
      if (video.paused) {
        video.play();
        playIcon.style.display = 'none';
        pauseIcon.style.display = 'block';
      } else {
        video.pause();
        playIcon.style.display = 'block';
        pauseIcon.style.display = 'none';
      }
    });

    muteButton.addEventListener('click', () => {
      video.muted = !video.muted;
      muteIcon.style.display = video.muted ? 'none' : 'block';
      unmuteIcon.style.display = video.muted ? 'block' : 'none';
    });

    fullScreenButton.addEventListener('click', () => {
      if (!document.fullscreenElement) {
        videoContainer.requestFullscreen();
      } else {
        document.exitFullscreen();
      }
    });

    seekBar.addEventListener('input', () => {
      video.currentTime = video.duration * (seekBar.value / 100);
    });

    video.addEventListener('timeupdate', () => {
      seekBar.value = (100 / video.duration) * video.currentTime;
    });

    volumeBar.addEventListener('input', () => {
      video.volume = volumeBar.value;
    });

    player.addEventListener('error', (event) => {
      console.error('Error code', event.detail.code, 'object', event.detail);
    });
  });

  async function setupThumbnails(player, thumbElement, vttUrl) {
    try {
      const thumbnailTrack = await player.addThumbnailsTrack(vttUrl);

      if (!thumbnailTrack) {
        throw new Error('Thumbnail track could not be added.');
      }

      const seekBar = document.getElementById('seek-bar');

      const showThumbnail = async (event) => {
        const duration = player.seekRange().end;
        const percent = (event.offsetX || event.touches[0].clientX - seekBar.getBoundingClientRect().left) / seekBar.clientWidth;
        const position = percent * duration;

        try {
          const thumbnail = await player.getThumbnails(thumbnailTrack.id, position);

          if (thumbnail && thumbnail.uris.length > 0) {
            const imageUrl = thumbnail.uris[0].split('#')[0];
            const x = thumbnail.positionX || 0;
            const y = thumbnail.positionY || 0;
            const width = thumbnail.width || 160;
            const height = thumbnail.height || 90;

            thumbElement.style.backgroundImage = `url(${imageUrl})`;
            thumbElement.style.backgroundPosition = `-${x}px -${y}px`;
            thumbElement.style.width = `${width}px`;
            thumbElement.style.height = `${height}px`;

            const seekBarRect = seekBar.getBoundingClientRect();
            let thumbX = event.pageX - seekBarRect.left ;
            let thumbY = -thumbElement.clientHeight;

            thumbElement.style.left = `${thumbX}px`;
            thumbElement.style.top = `${thumbY}px`;
            thumbElement.style.display = 'block';
          }
        } catch (error) {
          console.error('Error getting thumbnail:', error);
          errorDisplay.textContent = `Error getting thumbnail: ${error.message}`;
        }
      };

      seekBar.addEventListener('mousemove', debounce(showThumbnail, 5));
      seekBar.addEventListener('mouseleave', () => {
        thumbElement.style.display = 'none';
      });

      // Handle touch and click events for mobile
      seekBar.addEventListener('touchstart', showThumbnail);
      seekBar.addEventListener('touchmove', debounce(showThumbnail, 5));
      seekBar.addEventListener('click', showThumbnail);

    } catch (error) {
      console.error('Failed to set up thumbnails:', error);
      document.getElementById('error').textContent = `Failed to set up thumbnails: ${error.message}`;
    }
  }

  function debounce(func, delay) {
    let timer;
    return function(...args) {
      clearTimeout(timer);
      timer = setTimeout(() => func.apply(this, args), delay);
    };
  }

</script>
