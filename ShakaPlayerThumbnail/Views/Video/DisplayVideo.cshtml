<div id="video-container" class="video-container">
    <video id="video" controls></video>
    <div id="seekbar-container">
        <div id="seek-bar"></div>
        <div id="thumb" class="thumbnail">
            <img id="thumbImage"/>
        </div>
    </div>
    <button id="fullscreen-toggle-btn"></button>
    <div id="error" class="error-message"></div>
</div>

<script>document.addEventListener('DOMContentLoaded', async () => {
    const fullscreenToggleBtn = document.getElementById('fullscreen-toggle-btn');
    const video = document.getElementById('video');
    const seekBar = document.getElementById('seek-bar');
    const thumbElement = document.getElementById('thumb');
    const imageElement = document.getElementById('thumbImage');
    const videoContainer = document.getElementById('video-container');
    const player = new shaka.Player(video);

    let lastPreviewPosition = 0, thumbnailTrack;
    let isDraggingSeekbar = false;

    fullscreenToggleBtn?.addEventListener('click', toggleFullscreen);

    function toggleFullscreen() {
      if (!document.fullscreenElement) {
        videoContainer.requestFullscreen?.() ||
        videoContainer.mozRequestFullScreen?.() ||
        videoContainer.webkitRequestFullscreen?.() ||
        videoContainer.msRequestFullscreen?.();
      } else {
        document.exitFullscreen?.();
      }
      video.pause();
      setTimeout(() => {
        video.play();
      }, 300);
    }

    document.addEventListener('fullscreenchange', () => {
      videoContainer.classList.toggle('fullscreen', !!document.fullscreenElement);
    });

    try {
      const videoUrl = "@Html.Raw(Model.Item1)";
      const vttUrl = "@Html.Raw(Model.Item2)";
      await player.load(videoUrl);
      thumbnailTrack = await setupThumbnails(player, thumbElement, vttUrl);
    } catch (error) {
      console.error('Error loading video:', error);
    }

    async function setupThumbnails(player, thumbElement, vttUrl) {
      try {
        const thumbnailTrack = await player.addThumbnailsTrack(vttUrl);
        if (!thumbnailTrack) throw new Error('Thumbnail track could not be added.');

        // Handle mouse movement (hover)
        seekBar.addEventListener('mousemove', (e) => {
          if (!isDraggingSeekbar) {
            const { offsetX, position } = getSeekBarInfo(e);
            displayThumbnail(position, offsetX);
          }
        });

        // Handle dragging
        seekBar.addEventListener('mousedown', () => {
          isDraggingSeekbar = true;
          video.removeAttribute('controls');
        });

        seekBar.addEventListener('mouseup', () => {
          isDraggingSeekbar = false;
          video.setAttribute('controls', 'controls');
          hideThumbnail();
        });

        // Handle seeking
        seekBar.addEventListener('click', (e) => {
          const { position } = getSeekBarInfo(e);
          video.currentTime = position;
          displayThumbnail(position, e.offsetX);
        });

        // Hide thumbnail when mouse leaves seek bar
        seekBar.addEventListener('mouseleave', hideThumbnail);

        return thumbnailTrack;
      } catch (error) {
        console.error('Failed to set up thumbnails:', error);
      }
    }

    function getSeekBarInfo(event) {
      const seekBarRect = seekBar.getBoundingClientRect();
      const duration = player.seekRange().end;

      let offsetX = event.pageX - seekBarRect.left;
      const position = (offsetX / seekBarRect.width) * duration;
      return { offsetX, position };
    }

    function displayThumbnail(position, offsetX) {
      player.getThumbnails(thumbnailTrack.id, position).then((thumbnail) => {
        if (thumbnail?.uris.length) {
          const [imageUrl, { x, y, width, height }] = parseThumbnailData(thumbnail);

          if (imageElement.src !== imageUrl) {
            imageElement.src = imageUrl;
          }

          imageElement.style.objectPosition = `-${x}px -${y}px`;
          thumbElement.style.left = `${offsetX - thumbElement.offsetWidth / 2}px`;
          thumbElement.style.display = 'block';
        }
      }).catch((error) => console.error('Error getting thumbnail:', error));
    }

    function parseThumbnailData(thumbnail) {
      const imageUrl = thumbnail.uris[0].split('#')[0];
      const fragment = thumbnail.uris[0].split('#')[1];
      let x = 0, y = 0, width = 122, height = 70;

      if (fragment && fragment.startsWith("xywh=")) {
        const [, coords] = fragment.split("=");
        const [xValue, yValue, widthValue, heightValue] = coords.split(",");
        x = parseInt(xValue, 10);
        y = parseInt(yValue, 10);
        width = parseInt(widthValue, 10);
        height = parseInt(heightValue, 10);
      }

      return [imageUrl, { x, y, width, height }];
    }

    function hideThumbnail() {
      thumbElement.style.display = 'none';
    }
  });
</script>