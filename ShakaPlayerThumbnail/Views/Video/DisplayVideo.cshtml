<div id="video-container" class="video-container">
  <video id="video" controls preload="auto"></video>
  <div id="seekbar-container" style="display: none;">
    <div id="seek-bar"></div>
    <div id="thumb" class="thumbnail">
      <img id="thumbImage" />
    </div>
  </div>

  <button id="fullscreen-toggle-btn"></button>
  <div id="error" class="error-message"></div>
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/pako/2.1.0/pako.min.js" integrity="sha512-g2TeAWw5GPnX7z0Kn8nFbYfeHcvAu/tx6d6mrLe/90mkCxO+RcptyYpksUz35EO337F83bZwcmUyHiHamspkfg==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script>
  document.addEventListener('DOMContentLoaded', async () => {
    const fullscreenToggleBtn = document.getElementById('fullscreen-toggle-btn');
    const video = document.getElementById('video');
    const seekBar = document.getElementById('seek-bar');
    const thumbElement = document.getElementById('thumb');
    const errorDisplay = document.getElementById('error');
    const imageElement = document.getElementById('thumbImage');
    const videoContainer = document.getElementById('video-container');
    const player = new shaka.Player(video);

    let lastPreviewPosition = 0, thumbnailTrack, isHovering = false;
    let hideTimeout, isDraggingSeekbar = false, isInteractingWithSeekBar = false;

    fullscreenToggleBtn?.addEventListener('click', toggleFullscreen);

    function toggleFullscreen() {
      if (!document.fullscreenElement) {
        videoContainer.requestFullscreen?.() ||
        videoContainer.mozRequestFullScreen?.() ||
        videoContainer.webkitRequestFullscreen?.() ||
        videoContainer.msRequestFullscreen?.();
      } else {
        document.exitFullscreen?.();
      }
      video.pause();
      setTimeout(() => {
        video.play();
      }, 300);
    }

    document.addEventListener('fullscreenchange', () => {
      videoContainer.classList.toggle('fullscreen', !!document.fullscreenElement);
      adjustSeekbarPosition();
    });

    try {
      const videoUrl = "@Html.Raw(Model.Item1)";
      const vttUrl = "@Html.Raw(Model.Item2)";
      await player.load(videoUrl);
      player.configure({
        streaming: {
          gapDetectionThreshold: 1.5,
        },
      });

      console.log('Video loaded successfully!');
      const videoWidth = video.videoWidth;
      const videoHeight = video.videoHeight;
      const aspectRatio = videoWidth / videoHeight;
      thumbnailTrack = await setupThumbnails(player, thumbElement, vttUrl, aspectRatio);

      simulateVideoClick();

    } catch (error) {
      handleError('Error loading video', error);
    }

    player.addEventListener('error', (event) => {
      handleError('Player error', event.detail);
    });

    async function setupThumbnails(player, thumbElement, vttUrl, aspectRatio) {
      try {
        const vttBlobUrl = await fetchAndDecompressVtt(vttUrl);

        const thumbnailTrack = await player.addThumbnailsTrack(vttBlobUrl);
        if (!thumbnailTrack) throw new Error('Thumbnail track could not be added.');

        thumbElement.style.aspectRatio = `${aspectRatio}`;

        const seekbarContainer = document.getElementById('seekbar-container');
        seekbarContainer.style.display = 'block';

        const showThumbnail = debounce(handleThumbnailPreview, 5);

        ['mousemove', 'touchmove'].forEach((event) => {
          seekBar.addEventListener(event, (e) => {
            isInteractingWithSeekBar = true;
            clearTimeout(hideTimeout);
            isHovering = true;
            showThumbnail(e);
          });
        });

        ['mousedown', 'touchstart'].forEach((event) => {
          seekBar.addEventListener(event, () => {
            isDraggingSeekbar = true;
            video.pause(); // Only pause the video when the user starts interacting with the seek bar
          });
        });

        ['mouseleave', 'touchend', 'mouseup'].forEach((event) => {
          seekBar.addEventListener(event, () => {
            isDraggingSeekbar = false;
            isInteractingWithSeekBar = false; // Reset the interaction flag
            hideTimeout = setTimeout(() => {
              hideThumbnail();
            }, 5);
          });
        });

        return thumbnailTrack;
      } catch (error) {
        handleError('Failed to set up thumbnails', error);
      }
    }

    function handleThumbnailPreview(event) {
      const { offsetX, position } = getSeekBarInfo(event);
      lastPreviewPosition = position;

      player.getThumbnails(thumbnailTrack.id, position).then((thumbnail) => {
        if (thumbnail?.uris.length) {
          const [imageUrl, { x, y, width, height }] = parseThumbnailData(thumbnail);
          displayThumbnail(thumbElement, imageElement, imageUrl, x, y, width, height, offsetX);
        }
      }).catch((error) => handleError('Error getting thumbnail', error));
    }

    function hideThumbnail() {
      thumbElement.style.display = 'none';
    }

    // Prevent automatic play/pause when interacting with the seek bar
    video.addEventListener('touchstart', (e) => {
      if (isInteractingWithSeekBar) {
        e.preventDefault();
      }
    });

    seekBar.addEventListener('click', (e) => {
      const { position } = getSeekBarInfo(e);
      video.currentTime = Math.round(position);
    });

    videoContainer.addEventListener('mouseleave', () => {
      hideTimeout = setTimeout(() => {
        if (!isHoveringSeekbar() && !video.paused) {
          video.removeAttribute('controls');
        }
      }, 5);
    });

    document.addEventListener('click', (event) => {
      if (!videoContainer.contains(event.target) && !isHoveringSeekbar()) {
        video.removeAttribute('controls');
      }
    });

    function isHoveringSeekbar() {
      return seekBar.matches(':hover');
    }

    function handleError(message, error) {
      console.error(`${message}:`, error);
      if (errorDisplay) {
        errorDisplay.textContent = `${message}: ${error.message}`;
      }
    }
  });
</script>
