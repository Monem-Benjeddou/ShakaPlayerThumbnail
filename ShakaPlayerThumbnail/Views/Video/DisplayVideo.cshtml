<div id="video-container" class="video-container">
    <video id="video" controls preload="auto"></video>
    <div id="seekbar-container" style="display: none;">
      <div id="chapters-container" class="chapters-container d-flex flex-row "></div>
      <div id="seek-bar"></div>
      <div id="thumb" class="thumbnail">
        <img id="thumbImage"/>
        <div id="chapterTitle" class="chapter-title"></div> 
      </div>
    </div>

    <button id="fullscreen-toggle-btn"></button>
    <div id="error" class="error-message"></div>
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/pako/2.1.0/pako.min.js" integrity="sha512-g2TeAWw5GPnX7z0Kn8nFbYfeHcvAu/tx6d6mrLe/90mkCxO+RcptyYpksUz35EO337F83bZwcmUyHiHamspkfg==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script>
  document.addEventListener('DOMContentLoaded', async () => {
    const fullscreenToggleBtn = document.getElementById('fullscreen-toggle-btn');
    const video = document.getElementById('video');
    const seekBar = document.getElementById('seek-bar');
    const thumbElement = document.getElementById('thumb');
    const errorDisplay = document.getElementById('error');
    const imageElement = document.getElementById('thumbImage');
    const videoContainer = document.getElementById('video-container');
    
    const chaptersContainer = document.getElementById('chapters-container');
    
    const player = new shaka.Player(video);
    let chapters;
    let lastPreviewPosition = 0, thumbnailTrack, isHovering = false;
    let hideTimeout, isDraggingSeekbar = false;
    let debouncePause = false;

    fullscreenToggleBtn?.addEventListener('click', toggleFullscreen);

    function toggleFullscreen() {
      if (!document.fullscreenElement) {
        videoContainer.requestFullscreen?.() ||
        videoContainer.mozRequestFullScreen?.() ||
        videoContainer.webkitRequestFullscreen?.() ||
        videoContainer.msRequestFullscreen?.();
      } else {
        document.exitFullscreen?.();
      }
      video.pause();
      setTimeout(() => {
        video.play();
      }, 300);
    }
    window.addEventListener('resize', () => {
      seekBar.innerHTML = ''; 
      addChapterMarkersToSeekBar(chapters); 
    });
    document.addEventListener('fullscreenchange', () => {
      videoContainer.classList.toggle('fullscreen', !!document.fullscreenElement);
      adjustSeekbarPosition();
    });

    try {
      const videoUrl = "@Html.Raw(Model.Item1)";
      const vttUrl = "@Html.Raw(Model.Item2)";
      const chapterVtt = "@Html.Raw(Model.Item3)";

      await player.load(videoUrl);
      player.configure({
        streaming: {
          gapDetectionThreshold: 1.5,
        },
      });

      console.log('Video loaded successfully!');
      const videoWidth = video.videoWidth;
      const videoHeight = video.videoHeight;
      const aspectRatio = videoWidth / videoHeight;
      thumbnailTrack = await setupThumbnails(player, thumbElement, vttUrl, aspectRatio);
      if (chapterVtt){
        await loadAndDisplayChapters(chapterVtt);
      }

      simulateVideoClick();

    } catch (error) {
      handleError('Error loading video', error);
    }

    player.addEventListener('error', (event) => {
      handleError('Player error', event.detail);
    });
    async function loadAndDisplayChapters(vttUrl) {
      try {
        const response = await fetch(vttUrl);
        let vttText;
        if (response.ok) {
          vttText = await response.text();
          console.log('Fetched VTT Text:', vttText);
        } else {
          console.error('Failed to fetch VTT file:', response.statusText);
        }
        chapters = parseChaptersFromVTT(vttText);
        addChapterMarkersToSeekBar(chapters);
      } catch (error) {
        handleError('Failed to load chapters', error);
      }
    }
    function addChapterMarkersToSeekBar(chapters) {
      const seekBarWidth = seekBar.clientWidth;
      const videoDuration = video.duration;

      chapters.forEach((chapter, index) => {
        const chapterMarker = document.createElement('div');
        chapterMarker.classList.add('chapter-marker');

        const startPercentage = (chapter.start / videoDuration) * 100;
        chapterMarker.style.left = `${startPercentage}%`;
        

        chapterMarker.addEventListener('click', () => {
          video.currentTime = chapter.start;
          video.play();
        });

        seekBar.appendChild(chapterMarker);
      });
    }
    function parseChaptersFromVTT(vttText) {
      const chapterRegex = /(\d{2}:\d{2}:\d{2}\.\d{3})\s*-->\s*(\d{2}:\d{2}:\d{2}\.\d{3})\s*\n(.*?)(?:\n|$)/g;

      let chapters = [];
      let match;

      while ((match = chapterRegex.exec(vttText)) !== null) {
        const chapterStart = parseTimeString(match[1]);
        const chapterEnd = parseTimeString(match[2]);
        const chapterTitle = match[3].trim(); 

        chapters.push({
          title: chapterTitle,
          start: chapterStart,
          end: chapterEnd
        });
      }

      return chapters;
    }


    function parseTimeString(timeString) {
      const [hours, minutes, seconds] = timeString.split(':');
      return parseFloat(hours) * 3600 + parseFloat(minutes) * 60 + parseFloat(seconds);
    }
    
    async function fetchAndDecompressVtt(vttUrl) {
      try {
        const response = await fetch(vttUrl);
        if (!response.ok) throw new Error('Failed to fetch the compressed VTT file.');

        const compressedData = await response.arrayBuffer();
        const decompressedData = pako.inflate(new Uint8Array(compressedData));
        const decoder = new TextDecoder('utf-8');
        const decompressedVttContent = decoder.decode(decompressedData);

        if (!decompressedVttContent.startsWith('WEBVTT')) {
          throw new Error('Decompressed data is not a valid VTT file.');
        }

        const vttBlob = new Blob([decompressedVttContent], { type: 'text/vtt' });

        const vttBlobUrl = URL.createObjectURL(vttBlob);

        return vttBlobUrl;
      } catch (error) {
        throw new Error(`Failed to fetch and decompress VTT: ${error.message}`);
      }
    }

    async function setupThumbnails(player, thumbElement, vttUrl, aspectRatio) {
      try {
        const vttBlobUrl = await fetchAndDecompressVtt(vttUrl);

        const thumbnailTrack = await player.addThumbnailsTrack(vttBlobUrl);
        if (!thumbnailTrack) throw new Error('Thumbnail track could not be added.');

        thumbElement.style.aspectRatio = `${aspectRatio}`;

        const seekbarContainer = document.getElementById('seekbar-container');
        seekbarContainer.style.display = 'block';

        const showThumbnail = debounce(handleThumbnailPreview, 5);

        ['mousemove', 'touchmove'].forEach((event) => {
          seekBar.addEventListener(event, (e) => {
            clearTimeout(hideTimeout);
            if (!isDraggingSeekbar){
              video.removeAttribute('controls');
              video.setAttribute('controls', 'controls');
            }
            isHovering = true;
            showThumbnail(e);
          });
        });

        ['mousedown', 'touchstart'].forEach((event) => {
          seekBar.addEventListener(event, () => {
            isDraggingSeekbar = true;
            video.pause();
            debouncePause = true;
          });
        });

        ['mouseleave', 'touchend', 'mouseup'].forEach((event) => {
          seekBar.addEventListener(event, () => {
            hideTimeout = setTimeout(() => {
              hideThumbnail();
            }, 5);
            if (isDraggingSeekbar) {
              isDraggingSeekbar = false;
              video.play();
              setTimeout(() => {
                debouncePause = false; 
              }, 300);
            }
          });
        });

        ['mousemove', 'touchmove', 'mouseup'].forEach((event) => {
          seekBar.addEventListener(event, (e) => {
            if (isDraggingSeekbar) {
              const { position } = getSeekBarInfo(e);
              video.currentTime = Math.round(position);
            }
          });
        });
        return thumbnailTrack;
      } catch (error) {
        handleError('Failed to set up thumbnails', error);
      }
    }

    function simulateVideoClick() {
      document.body.addEventListener('click', () => {
        video.focus();
        video.dispatchEvent(new Event('click'));
      }, { once: true });
    }

    function handleThumbnailPreview(event) {
      const { offsetX, position } = getSeekBarInfo(event);
      lastPreviewPosition = position;

      player.getThumbnails(thumbnailTrack.id, position).then((thumbnail) => {
        if (thumbnail?.uris.length) {
          const [imageUrl, { x, y, width, height }] = parseThumbnailData(thumbnail);
          displayThumbnail(thumbElement, imageElement, imageUrl, x, y, width, height, offsetX);

          const currentChapter = findChapterForTime(position);
          displayChapterTitle(currentChapter);
          const chapterTitleElement = document.getElementById('chapterTitle');

          if (chapterTitleElement){
            let chapterHeight = -chapterTitleElement.offsetHeight-80;
            thumbElement.style.top = chapterHeight+"px";
          }else{
            thumbElement.style.top = "-80px";

          }
          if (chapterTitleElement){
            let chapterHeight = chapterTitleElement.offsetHeight-80;
            thumbElement.style.top = {chapterHeight}+"px";
          }else{
            thumbElement.style.top = "-80px";

          }
        }
      }).catch((error) => handleError('Error getting thumbnail', error));
    }
    function findChapterForTime(currentTime) {
      return chapters.find(chapter => currentTime >= chapter.start);
    }
    function displayChapterTitle(chapter) {
      const chapterTitleElement = document.getElementById('chapterTitle');
      seekBar.style.backgroundColor = 'rgba(255,255,255,.2)';

      if (chapter) {
        chapterTitleElement.textContent = chapter.title;
        chapterTitleElement.style.display = 'block';
      } else {
        chapterTitleElement.style.display = 'none';
        chapterTitleElement.style.display = 'none';

      }
    }


    function adjustSeekbarPosition() {
      const seekbarContainer = document.getElementById('seekbar-container');
      seekbarContainer.classList.toggle('fullscreen', !!document.fullscreenElement);
    }

    function debounce(func, delay) {
      let timer;
      return function (...args) {
        clearTimeout(timer);
        timer = setTimeout(() => func.apply(this, args), delay);
      };
    }

    function getSeekBarInfo(event) {
      const seekBarRect = seekBar.getBoundingClientRect();
      const duration = video.duration; // Use video.duration for a standard video

      let offsetX;
      if (event.touches && event.touches.length > 0) {
        offsetX = event.touches[0].clientX - seekBarRect.left;
      } else if (event.changedTouches && event.changedTouches.length > 0) {
        offsetX = event.changedTouches[0].clientX - seekBarRect.left;
      } else {
        offsetX = event.pageX - seekBarRect.left;
      }

      const position = (offsetX / seekBarRect.width) * duration;
      return { offsetX, position };
    }

    function parseThumbnailData(thumbnail) {
      const imageUrl = thumbnail.uris[0].split('#')[0];
      const fragment = thumbnail.uris[0].split('#')[1];
      let x = 0, y = 0, width = 122, height = 70;

      if (fragment && fragment.startsWith("xywh=")) {
        const [, coords] = fragment.split("=");
        const [xValue, yValue, widthValue, heightValue] = coords.split(",");
        x = parseInt(xValue, 10);
        y = parseInt(yValue, 10);
        width = parseInt(widthValue, 10);
        height = parseInt(heightValue, 10);
      }

      return [imageUrl, { x, y, width, height }];
    }

    function displayThumbnail(thumbElement, imageElement, imageUrl, x, y, width, height, offsetX) {
      if (imageElement.src !== imageUrl) {
        imageElement.src = imageUrl;
      }

      thumbElement.style.width = '122px';
      thumbElement.style.height = '70px';

      imageElement.style.objectPosition = `-${x}px -${y}px`;

      const thumbX = Math.max(thumbElement.clientWidth / 2, Math.min(seekBar.clientWidth - thumbElement.clientWidth / 2, offsetX));
      if (width < 120) {
        imageElement.style.marginLeft = `${60 - width / 2}px`;
      }

      thumbElement.style.left = `${thumbX}px`;
      const chapterTitleElement = document.getElementById('chapterTitle');



      thumbElement.style.display = 'block';
      video.focus();
    }

    function hideThumbnail() {
      thumbElement.style.display = 'none';
      seekBar.style.backgroundColor = '';
    }

    seekBar.addEventListener('click', (e) => {
      const { position } = getSeekBarInfo(e);
      video.currentTime = Math.round(position);
    });

    video.addEventListener('mouseover', () => {
      video.setAttribute('controls', 'controls');
      
    });

    videoContainer.addEventListener('mouseleave', () => {
      hideTimeout = setTimeout(() => {
        if (!isHoveringSeekbar() && !video.paused) {
          video.removeAttribute('controls');
        }
      }, 5);
    });
    
    function isHoveringSeekbar() {
      return seekBar.matches(':hover');
    }
    document.addEventListener('fullscreenchange', () => {
      const isFullScreen = !!document.fullscreenElement;
      videoContainer.classList.toggle('fullscreen', isFullScreen);
    });

    function handleError(message, error) {
      errorDisplay.textContent = `${message}: ${error.message || error}`;
      errorDisplay.style.display = 'block';
      console.error(message, error);
    }
  });
</script>