    @model ShakaPlayerThumbnail.Data.Video
    @{
    ViewData["Title"] = "Upload Video";
    }

    <div class="container mt-5">
    <div id="thumbnailProgressContainer" class="mt-4" style="display:none;">
        <label>Thumbnail Generation Progress</label>
        <div id="thumbnailProgress" class="progress mt-2">
            <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 0%;height: 100%;"></div>
        </div>
    </div>
</div>

    <script>
    const uploadBtn = document.getElementById('uploadBtn');
    const cancelBtn = document.getElementById('cancelBtn');
    let abortController = null;

    uploadBtn.addEventListener('click', async function () {
        const fileInput = document.getElementById('VideoFile');
        const file = fileInput.files[0];

        if (!file) {
            alert("Please select a video file.");
            return;
        }

        cancelBtn.style.display = 'block';
        abortController = new AbortController();

        const chunkSize = 512 * 1024; 
        const totalChunks = Math.ceil(file.size / chunkSize);
        const progressBar = document.querySelector('.progress-bar');
        const progress = document.getElementById('uploadProgress');
        const successMessage = document.getElementById('successMessage');
        const errorMessage = document.getElementById('errorMessage');

        progress.style.display = 'block';
        progressBar.style.width = '0%';
        successMessage.style.display = 'none';
        errorMessage.style.display = 'none';

        try {
            for (let i = 0; i < totalChunks; i++) {
                const start = i * chunkSize;
                const end = Math.min(start + chunkSize, file.size);
                const chunk = file.slice(start, end);
                const formData = new FormData();

                formData.append('videoChunk', chunk);
                formData.append('chunkIndex', i);
                formData.append('totalChunks', totalChunks);
                formData.append('fileName', file.name);

                const response = await fetch('@Url.Action("UploadVideoChunk", "Video")', {
                    method: 'POST',
                    body: formData,
                    signal: abortController.signal
                });

                if (!response.ok) {
                    throw new Error('Failed to upload chunk ' + i);
                }

                const percentage = ((i + 1) / totalChunks) * 100;
                progressBar.style.width = percentage + '%';
                progressBar.setAttribute('aria-valuenow', percentage);

                console.log(`Chunk ${i + 1} of ${totalChunks} uploaded (${percentage.toFixed(2)}%)`);
            }

            successMessage.style.display = 'block';
            successMessage.innerText = 'Video uploaded successfully!';

            await startThumbnailProgressPolling(file.name);
        } catch (error) {
            if (error.name === 'AbortError') {
                errorMessage.style.display = 'block';
                errorMessage.innerText = 'Upload cancelled.';
            } else {
                errorMessage.style.display = 'block';
                errorMessage.innerText = 'An error occurred during the upload: ' + error.message;
            }
        } finally {
            cancelBtn.style.display = 'none';
            progress.style.display = 'none';
        }
    });

    cancelBtn.addEventListener('click', function () {
        if (abortController) {
            abortController.abort();
        }
    });

    const thumbnailProgressBar = document.querySelector('#thumbnailProgress .progress-bar');
    const thumbnailProgressContainer = document.getElementById('thumbnailProgressContainer');
    

    async function checkThumbnailProgress(videoFileName) {
        try {
            const fileNameWithoutExtension = videoFileName.substring(0, videoFileName.lastIndexOf('.')) || videoFileName;
            const progressUrl = '@Url.Action("GetThumbnailGenerationProgress", "Video")' + `?fileName=${encodeURIComponent(fileNameWithoutExtension)}`;
            const response = await fetch(progressUrl);
            const data = await response.json();
            const progress = data.progress;
            thumbnailProgressBar.style.width = progress + '%';
            thumbnailProgressBar.setAttribute('aria-valuenow', progress);

            if (progress < 100) {
                setTimeout(() => checkThumbnailProgress(videoFileName), 2000);
            } else {
                thumbnailProgressContainer.style.display = 'none';
                console.log('Thumbnail generation complete');
            }
        } catch (error) {
            console.error('Error checking thumbnail generation progress:', error);
            setTimeout(() => checkThumbnailProgress(videoFileName), 2000);
        }
    }

    function startThumbnailProgressPolling(videoFileName) {
        thumbnailProgressContainer.style.display = 'block';
        thumbnailProgressBar.style.width = '0%';
        checkThumbnailProgress(videoFileName);
    }
</script>