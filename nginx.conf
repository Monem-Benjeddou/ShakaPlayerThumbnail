user nginx;
worker_processes auto;

error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    keepalive_timeout 65;

    include /etc/nginx/conf.d/*.conf;

    # Enable gzip compression
    gzip on;
    gzip_types text/plain application/javascript application/x-javascript text/javascript text/xml text/css application/json;
    gzip_vary on;
    gzip_proxied any;
    gzip_min_length 1000;
    gzip_comp_level 6;

    server {
        listen 80;
        server_name thumbnail.john-group.org;

        # Proxy for Shaka Player's backend
        location / {
            proxy_pass http://shakaplayerthumbnail:5006;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            client_max_body_size 100M;

            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_read_timeout 86400;
        }

        # Serving media files from /data/
        location /data/ {
            alias /etc/data/;
            
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Accept-Ranges' 'bytes' always;

            # MIME types for various media files
            types {
                video/mp4 mp4;
                video/webm webm;
                video/ogg ogg;
                image/png png;
                image/jpeg jpg jpeg;
                application/vnd.apple.mpegurl m3u8;
                video/mp2t ts;
                text/vtt vtt;
                application/javascript js;
            }
            gunzip on;
            gzip_static on;  # Serve .gz files when available
            add_header Content-Encoding gzip;

            # Ensure Range support works correctly for seeking
            open_file_cache max=1000 inactive=20s;
            open_file_cache_valid 30s;
            open_file_cache_min_uses 2;
            open_file_cache_errors on;

            # Enable efficient file serving with sendfile and buffering off
            sendfile on;
            tcp_nopush on;
            aio on;
            directio 512;
        }

        # Handle .gz requests directly if not handled by gzip_static
        location ~* \.gz$ {
            add_header Content-Encoding gzip;
            add_header 'Access-Control-Allow-Origin' '*' always;
            types { text/vtt vtt; application/javascript js; text/css css; }
        }
    }
}
